% feature vector: single vector consisting of 1s and 0s corresponding to
% the feature that is used
% feature matrix: feature labesl and number of benign samples containing each of the
% corresponding features

function get_classification(feature_vector, feature_matrix, no_malware_samples, no_benign_samples)
    [rows, ~] = size(feature_matrix);
    P_m_r = 1;
    P_b_r = 1;
    for i=1:rows
        if feature_vector(i, 1) == 1
            prm = round(str2double(feature_matrix(i, 2))/no_malware_samples, 3);
            fprintf("(R%d = %d | C=M) = %d/%d = %d\n", i, feature_vector(i, 1), str2double(feature_matrix(i, 2)), no_malware_samples, prm);
            prb = round(str2double(feature_matrix(i, 3))/no_benign_samples, 3);
            fprintf("(R%d = %d | C=B) = %d/%d = %d\n", i, feature_vector(i, 1), str2double(feature_matrix(i, 3)), no_benign_samples, prb);
        else
            prm = round(1- (str2double(feature_matrix(i, 2))/no_malware_samples), 3);
            fprintf("(R%d = %d | C=M) = 1 - %d/%d = %d\n", i, feature_vector(i, 1), str2double(feature_matrix(i, 2)), no_malware_samples, prm);
            prb = round(1 - (str2double(feature_matrix(i, 3))/no_benign_samples), 3);
            fprintf("(R%d = %d | C=B) = 1 - %d/%d = %d\n", i, feature_vector(i, 1), str2double(feature_matrix(i, 3)), no_benign_samples, prb);
        end
        P_m_r = P_m_r * prm;
        P_b_r = P_b_r * prb;
    end
    disp("P(C=M|R) = " + P_m_r);
    disp("P(C=B|R) = " + P_b_r);
    if P_m_r > P_b_r
        disp("Final decision - file is more liklely to be Malware because the probablility of the malare given features is higher than the probability of benign given features (i.e. P(M|R=r) is greater than P(B|R=r)");
    else
        disp("Final decision - file is more liklely to be Benign because the probablility of the benign given features is higher than the probability of malware given features (i.e. P(B|R=r) is greater than P(M|R=r)");

    end
end